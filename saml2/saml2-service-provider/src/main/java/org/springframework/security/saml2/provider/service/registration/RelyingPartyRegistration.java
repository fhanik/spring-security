/*
 * Copyright 2002-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.springframework.security.saml2.provider.service.registration;

import org.springframework.security.saml2.credentials.Saml2X509Credential;
import org.springframework.security.saml2.credentials.Saml2X509Credential.Saml2X509CredentialType;
import org.springframework.util.Assert;

import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Consumer;
import java.util.function.Function;

import static java.util.Collections.unmodifiableList;
import static org.springframework.util.Assert.hasText;
import static org.springframework.util.Assert.notEmpty;
import static org.springframework.util.Assert.notNull;

/**
 * Represents a configured service provider, SP, and a remote identity provider, IDP, pair.
 * Each SP/IDP pair is uniquely identified using a <code>registrationId</code>, an arbitrary string.
 * A fully configured registration may look like
 * <pre>
 *		//remote IDP entity ID
 *		String idpEntityId = "https://simplesaml-for-spring-saml.cfapps.io/saml2/idp/metadata.php";
 *		//remote WebSSO Endpoint - Where to Send AuthNRequests to
 *		String webSsoEndpoint = "https://simplesaml-for-spring-saml.cfapps.io/saml2/idp/SSOService.php";
 *		//local registration ID
 *		String registrationId = "simplesamlphp";
 *		//local entity ID - autogenerated based on URL
 *		String localEntityIdTemplate = "{baseUrl}/saml2/service-provider-metadata/{registrationId}";
 *		//local SSO URL - autogenerated, endpoint to receive SAML Response objects
 *		String acsUrlTemplate = "{baseUrl}/login/saml2/sso/{registrationId}";
 *		//local signing (and local decryption key and remote encryption certificate)
 *		Saml2X509Credential signingCredential = getSigningCredential();
 *		//IDP certificate for verification of incoming messages
 *		Saml2X509Credential idpVerificationCertificate = getVerificationCertificate();
 *		RelyingPartyRegistration rp = RelyingPartyRegistration.withRegistrationId(registrationId)
 * 				.remoteIdpEntityId(idpEntityId)
 * 				.idpSsoConfiguration(config -> config.idpWebSsoUrl(url));
 * 				.credentials(c -> c.add(signingCredential))
 * 				.credentials(c -> c.add(idpVerificationCertificate))
 * 				.localEntityIdTemplate(localEntityIdTemplate)
 * 				.assertionConsumerServiceUrlTemplate(acsUrlTemplate)
 * 				.build();
 * </pre>
 * @since 5.2
 */
public class RelyingPartyRegistration {

	/**
	 * The type of bindings that messages are exchanged using
	 * Only supported bindings are {@code urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST}
	 * and {@code urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect}
	 * @since 5.3
	 */
	public enum Saml2MessageBinding {
		POST, REDIRECT
	}

	/**
	 * The type of signatures that a message can be signed with
	 * Supported signature types are {@code urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST-SimpleSign} and
	 * {@code XML Signatures http://www.w3.org/2000/09/xmldsig#}
	 * This implementation supports both signature types on either {@link Saml2MessageBinding#REDIRECT} or
	 * the {@link Saml2MessageBinding#POST} bindings
	 * @since 5.3
	 */
	public enum Saml2SignatureType {

		XML_SIGNATURE,
		SIMPLE_SIGNATURE
	}

	private final String registrationId;
	private final String remoteIdpEntityId;
	private final String assertionConsumerServiceUrlTemplate;
	private final List<Saml2X509Credential> credentials;
	private final String localEntityIdTemplate;
	private final IdpSsoConfiguration idpSsoConfiguration;

	private RelyingPartyRegistration(String idpEntityId, String registrationId, String assertionConsumerServiceUrlTemplate,
			IdpSsoConfiguration idpSsoConfiguration, List<Saml2X509Credential> credentials, String localEntityIdTemplate) {
		hasText(idpEntityId, "idpEntityId cannot be empty");
		hasText(registrationId, "registrationId cannot be empty");
		hasText(assertionConsumerServiceUrlTemplate, "assertionConsumerServiceUrlTemplate cannot be empty");
		hasText(localEntityIdTemplate, "localEntityIdTemplate cannot be empty");
		notEmpty(credentials, "credentials cannot be empty");
		notNull(idpSsoConfiguration, "idpSsoConfiguration cannot be null");
		hasText(idpSsoConfiguration.idpWebSsoUrl, "idpSsoConfiguration.idpWebSsoUrl cannot be empty");
		for (Saml2X509Credential c : credentials) {
			notNull(c, "credentials cannot contain null elements");
		}
		this.registrationId = registrationId;
		this.remoteIdpEntityId = idpEntityId;
		this.assertionConsumerServiceUrlTemplate = assertionConsumerServiceUrlTemplate;
		this.credentials = unmodifiableList(new LinkedList<>(credentials));
		this.idpSsoConfiguration = idpSsoConfiguration;
		this.localEntityIdTemplate = localEntityIdTemplate;
	}

	/**
	 * Returns the entity ID of the IDP, the asserting party.
	 * @return entity ID of the asserting party
	 */
	public String getRemoteIdpEntityId() {
		return this.remoteIdpEntityId;
	}

	/**
	 * Returns the unique relying party registration ID
	 * @return registrationId
	 */
	public String getRegistrationId() {
		return this.registrationId;
	}

	/**
	 * returns the URL template for which ACS URL authentication requests should contain
	 * Possible variables are {@code baseUrl}, {@code registrationId},
	 * {@code baseScheme}, {@code baseHost}, and {@code basePort}.
	 * @return string containing the ACS URL template, with or without variables present
	 */
	public String getAssertionConsumerServiceUrlTemplate() {
		return this.assertionConsumerServiceUrlTemplate;
	}

	/**
	 * Contains the URL for which to send the SAML 2 Authentication Request to initiate
	 * a single sign on flow.
	 * @return a IDP URL that accepts REDIRECT or POST binding for authentication requests
	 * @deprecated use {@link #getIdpSsoConfiguration()} to retrieve IDP web SSO configurations
	 */
	public String getIdpWebSsoUrl() {
		return this.idpSsoConfiguration.idpWebSsoUrl;
	}

	/**
	 * Returns specific configuration around the IDP SSO endpoint
	 * @return the IDP SSO endpoint configuration
	 * @since 5.3
	 */
	public IdpSsoConfiguration getIdpSsoConfiguration() {
		return this.idpSsoConfiguration;
	}

	/**
	 * The local relying party, or Service Provider, can generate it's entity ID based on
	 * possible variables of {@code baseUrl}, {@code registrationId},
	 * {@code baseScheme}, {@code baseHost}, and {@code basePort}, for example
	 * {@code {baseUrl}/saml2/service-provider-metadata/{registrationId}}
	 * @return a string containing the entity ID or entity ID template
	 */
	public String getLocalEntityIdTemplate() {
		return this.localEntityIdTemplate;
	}

	/**
	 * Returns a list of configured credentials to be used in message exchanges between relying party, SP, and
	 * asserting party, IDP.
	 * @return a list of credentials
	 */
	public List<Saml2X509Credential> getCredentials() {
		return this.credentials;
	}

	/**
	 * @return a filtered list containing only credentials of type
	 * {@link Saml2X509CredentialType#VERIFICATION}.
	 * Returns an empty list of credentials are not found
	 */
	public List<Saml2X509Credential> getVerificationCredentials() {
		return filterCredentials(c -> c.isSignatureVerficationCredential());
	}

	/**
	 * @return a filtered list containing only credentials of type
	 * {@link Saml2X509CredentialType#SIGNING}.
	 * Returns an empty list of credentials are not found
	 */
	public List<Saml2X509Credential> getSigningCredentials() {
		return filterCredentials(c -> c.isSigningCredential());
	}

	/**
	 * @return a filtered list containing only credentials of type
	 * {@link Saml2X509CredentialType#ENCRYPTION}.
	 * Returns an empty list of credentials are not found
	 */
	public List<Saml2X509Credential> getEncryptionCredentials() {
		return filterCredentials(c -> c.isEncryptionCredential());
	}

	/**
	 * @return a filtered list containing only credentials of type
	 * {@link Saml2X509CredentialType#DECRYPTION}.
	 * Returns an empty list of credentials are not found
	 */
	public List<Saml2X509Credential> getDecryptionCredentials() {
		return filterCredentials(c -> c.isDecryptionCredential());
	}

	private List<Saml2X509Credential> filterCredentials(Function<Saml2X509Credential, Boolean> filter) {
		List<Saml2X509Credential> result = new LinkedList<>();
		for (Saml2X509Credential c : getCredentials()) {
			if (filter.apply(c)) {
				result.add(c);
			}
		}
		return result;
	}

	/**
	 * Creates a {@code RelyingPartyRegistration} {@link Builder} with a known {@code registrationId}
	 * @param registrationId a string identifier for the {@code RelyingPartyRegistration}
	 * @return {@code Builder} to create a {@code RelyingPartyRegistration} object
	 */
	public static Builder withRegistrationId(String registrationId) {
		Assert.hasText(registrationId, "registrationId cannot be empty");
		return new Builder(registrationId);
	}

	/**
	 * Configuration for IDP SSO endpoint configuration
	 * @since 5.3
	 */
	public static class IdpSsoConfiguration {
		private final String idpWebSsoUrl;
		private final boolean signAuthNRequest;
		private final Saml2MessageBinding binding;
		private final Saml2SignatureType signatureType;

		private IdpSsoConfiguration(
				String idpWebSsoUrl,
				boolean signAuthNRequest,
				Saml2MessageBinding binding,
				Saml2SignatureType signatureType) {
			notNull(idpWebSsoUrl, "idpWebSsoUrl cannot be null");
			notNull(binding, "binding cannot be null");
			notNull(signatureType, "signatureType cannot be null");
			this.idpWebSsoUrl = idpWebSsoUrl;
			this.signAuthNRequest = signAuthNRequest;
			this.binding = binding;
			this.signatureType = signatureType;
		}

		/**
		 * Contains the URL for which to send the SAML 2 Authentication Request to initiate
		 * a single sign on flow.
		 * @return a IDP URL that accepts REDIRECT or POST binding for authentication requests
		 */
		public String getIdpWebSsoUrl() {
			return idpWebSsoUrl;
		}

		/**
		 * @return {@code true} if AuthNRequests from this relying party to the IDP should be signed
		 * {@code false} if no signature is required.
		 */
		public boolean isSignAuthNRequest() {
			return signAuthNRequest;
		}

		/**
		 * @return the type of SAML 2 Binding the AuthNRequest should be sent on
		 */
		public Saml2MessageBinding getBinding() {
			return binding;
		}

		/**
		 * Returns the signature type that should be used when sending AuthNRequest messages
		 * If the {@link Saml2SignatureType#SIMPLE_SIGNATURE} is indicated, then the two parameters,
		 * {@code Signature} and {@code SigAlg} will be set on as query parameters on a {@link Saml2MessageBinding#REDIRECT}
		 * binding and as form data parameters on the {@link Saml2MessageBinding#POST} binding.
		 * @return the type of signature strategy that should used when signing AuthNRequest messages
		 */
		public Saml2SignatureType getSignatureType() {
			return signatureType;
		}
	}

	public static class Builder {
		private String registrationId;
		private String remoteIdpEntityId;
		private String assertionConsumerServiceUrlTemplate;
		private List<Saml2X509Credential> credentials = new LinkedList<>();
		private String localEntityIdTemplate = "{baseUrl}/saml2/service-provider-metadata/{registrationId}";
		private IdpSsoConfigurationBuilder idpSsoConfiguration = new IdpSsoConfigurationBuilder();

		private Builder(String registrationId) {
			this.registrationId = registrationId;
		}


		/**
		 * Sets the {@code registrationId} template. Often be used in URL paths
		 * @param id registrationId for this object, should be unique
		 * @return this object
		 */
		public Builder registrationId(String id) {
			this.registrationId = id;
			return this;
		}

		/**
		 * Sets the {@code entityId} for the remote asserting party, the Identity Provider.
		 * @param entityId the IDP entityId
		 * @return this object
		 */
		public Builder remoteIdpEntityId(String entityId) {
			this.remoteIdpEntityId = entityId;
			return this;
		}

		/**
		 * <a href="https://wiki.shibboleth.net/confluence/display/CONCEPT/AssertionConsumerService">Assertion Consumer
		 * Service</a> URL template. It can contain variables {@code baseUrl}, {@code registrationId},
		 * {@code baseScheme}, {@code baseHost}, and {@code basePort}.
		 * @param assertionConsumerServiceUrlTemplate the Assertion Consumer Service URL template (i.e.
		 * "{baseUrl}/login/saml2/sso/{registrationId}".
		 * @return this object
		 */
		public Builder assertionConsumerServiceUrlTemplate(String assertionConsumerServiceUrlTemplate) {
			this.assertionConsumerServiceUrlTemplate = assertionConsumerServiceUrlTemplate;
			return this;
		}

		/**
		 * Sets the {@code SSO URL} for the remote asserting party, the Identity Provider.
		 * @param url - a URL that accepts authentication requests via REDIRECT or POST bindings
		 * @return this object
		 * @deprecated use {@link #idpSsoConfiguration(Consumer<IdpSsoConfigurationBuilder>)}
		 */
		public Builder idpWebSsoUrl(String url) {
			idpSsoConfiguration(config -> config.idpWebSsoUrl(url));
			return this;
		}

		/**
		 * Configures the IDP SSO endpoint
		 * @param idpSsoConfig a consumer that configures the IDP SSO endpoint
		 * @return this object
		 */
		public Builder idpSsoConfiguration(Consumer<IdpSsoConfigurationBuilder> idpSsoConfig) {
			idpSsoConfig.accept(this.idpSsoConfiguration);
			return this;
		}

		/**
		 * Modifies the collection of {@link Saml2X509Credential} objects
		 * used in communication between IDP and SP
		 * For example:
		 * <code>
		 *     Saml2X509Credential credential = ...;
		 *     return RelyingPartyRegistration.withRegistrationId("id")
		 *             .credentials(c -> c.add(credential))
		 *             ...
		 *             .build();
		 * </code>
		 * @param credentials - a consumer that can modify the collection of credentials
		 * @return this object
		 */
		public Builder credentials(Consumer<Collection<Saml2X509Credential>> credentials) {
			credentials.accept(this.credentials);
			return this;
		}

		/**
		 * Sets the local relying party, or Service Provider, entity Id template.
		 * can generate it's entity ID based on possible variables of {@code baseUrl}, {@code registrationId},
		 * {@code baseScheme}, {@code baseHost}, and {@code basePort}, for example
		 * {@code {baseUrl}/saml2/service-provider-metadata/{registrationId}}
		 * @return a string containing the entity ID or entity ID template
		 */

		public Builder localEntityIdTemplate(String template) {
			this.localEntityIdTemplate = template;
			return this;
		}

		/**
		 * Constructs a RelyingPartyRegistration object based on the builder configurations
		 * @return a RelyingPartyRegistration instance
		 */
		public RelyingPartyRegistration build() {
			return new RelyingPartyRegistration(
					remoteIdpEntityId,
					registrationId,
					assertionConsumerServiceUrlTemplate,
					new IdpSsoConfiguration(
							idpSsoConfiguration.idpWebSsoUrl,
							idpSsoConfiguration.signAuthNRequest,
							idpSsoConfiguration.binding,
							idpSsoConfiguration.signatureType
					),
					credentials,
					localEntityIdTemplate
			);
		}
	}

	/**
	 * Builder for IDP SSO endpoint configuration
	 * @since 5.3
	 */
	public static class IdpSsoConfigurationBuilder {
		private String idpWebSsoUrl;
		private boolean signAuthNRequest = true;
		private Saml2MessageBinding binding = Saml2MessageBinding.REDIRECT;
		private Saml2SignatureType signatureType = Saml2SignatureType.XML_SIGNATURE;

		/**
		 * Sets the {@code SSO URL} for the remote asserting party, the Identity Provider.
		 * @param url - a URL that accepts authentication requests via REDIRECT or POST bindings
		 * @return this object
		 */
		public IdpSsoConfigurationBuilder idpWebSsoUrl(String url) {
			this.idpWebSsoUrl = url;
			return this;
		}

		/**
		 * Set to true if the AuthNRequest message should be signed
		 * @param signAuthNRequest true if the message should be signed
		 * @return this object
		 */
		public IdpSsoConfigurationBuilder signAuthNRequest(boolean signAuthNRequest) {
			this.signAuthNRequest = signAuthNRequest;
			return this;
		}

		/**
		 * Sets the message binding to be used when sending an AuthNRequest message
		 * @param binding either {@link Saml2MessageBinding#POST} or {@link Saml2MessageBinding#REDIRECT}
		 * @return this object
		 */
		public IdpSsoConfigurationBuilder binding(Saml2MessageBinding binding) {
			this.binding = binding;
			return this;
		}

		/**
		 * Sets the signature type to be used when signing an AuthNRequest message.
		 * The signature type is ignored if {@link #signAuthNRequest} is invoked with a {@code false} parameter
		 * @param signatureType the signature type,
		 *                      either {@link Saml2SignatureType#XML_SIGNATURE} or
		 *                      {@link Saml2SignatureType#SIMPLE_SIGNATURE}
		 * @return
		 */
		public IdpSsoConfigurationBuilder signatureType(Saml2SignatureType signatureType) {
			this.signatureType = signatureType;
			return this;
		}
	}


}
